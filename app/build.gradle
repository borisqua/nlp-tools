/*
 * This file was generated by the Gradle 'init' task.
 * and modified by me
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.1/userguide/building_java_projects.html
 * 
 * I added:
 * - standard input/output streams suppeort for run and test tasks
 * - java toolchain language version property
 * - test task logging events
 * - instruct jar task to automatically generate manifest file with "Main-Class" attribute set
 * - and plus some helpfull comments
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    // Applying the Application plugin also implicitly applies the Java plugin
    // Distribution plugin is automatically applied too
    id 'application'
}

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
    //mavenCentral()
}

dependencies {
    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    // This dependency is used by the application.
    //implementation 'com.google.guava:guava:29.0-jre'
}

application {
    //applicationDefaultJvmArgs = ['-Dgreeting.language=en']
    //executableDir = 'custom_bin_dir'

    // Define the main class for the application.
    // mainModule = 'nlptools' // if application is modular
    mainClass = 'nlptools.App'
}

java {
    //modularity.inferModularPath=true // if application is modular
    toolchain {
        languageVersion = JavaLanguageVersion.of(14)
    }
}

//tasks.named('test') {
    // Use junit platform for unit tests.
    // useJUnitPlatform()
//}

test {
    // To output test results into standard console
    useJUnitPlatform()
    dependsOn cleanTest
    testLogging.showStandardStreams=true
    testLogging {
        events "passed", "skipped", "failed"
    }
}

run {
    standardInput = System.in
}

jar {
    manifest {
        attributes("Main-Class": "nlptools.App")
    }
}

